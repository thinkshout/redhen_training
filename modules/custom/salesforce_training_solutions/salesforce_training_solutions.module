<?php
/**
 * @file
 * Code for the Salesforce Solutions feature.
 */

include_once 'salesforce_training_solutions.features.inc';

/**
 * Implements hook_salesforce_push_params_alter().
 *
 * Often, data on Drupal will not be naturally formulated the same way as data
 * on Salesforce. You can use push_params_alter to clean this data up. It is
 * also useful when the entity relationships and the object relationships don't
 * match precisely, as you see below with the way Users and Contacts on Drupal
 * connect with Salesforce Contacts.
 */
function salesforce_training_solutions_salesforce_push_params_alter(&$params, $mapping, $entity_wrapper) {
  switch ($mapping->name) {
    case 'registrations':
      // If a registration has already been sent to Salesforce, Salesforce
      // already knows which Contact and Campaign to connect it to. If you try
      // to send values for these fields to Salesforce, even the same ones, it
      // will reject them, as these values cannot be changed on Salesforce's
      // Campaign Member objects, so we much be sure not to submit these values
      // in such cases.
      // First, we load up the mapping object for this entity:
      $mapping_object = isset($entity_wrapper->salesforce_mapping_object) ? $entity_wrapper->salesforce_mapping_object->value() : FALSE;
      if ($mapping_object && $mapping_object->salesforce_id) {
        // The object loaded and already has a valid SF ID, so we unset the
        // Contact and Campaign reference values:
        unset($params['CampaignId']);
        unset($params['ContactId']);
      }
      else {
        // Drupal Registrations are connected to Users, not to their contacts.
        // We help the Salesforce module find the correct contact via the User:
        $params['ContactId'] = $entity_wrapper->user->redhen_contact->salesforce_mapping_object->salesforce_id->value();
      }
  }
}

/**
 * Implements hook_salesforce_pull_entity_value_alter().
 *
 * When pulling Campaign Member values from Salesforce, we must look up the
 * appropriate User, since Registrations link to Contacts rather than Users.
 */
function salesforce_training_solutions_salesforce_pull_entity_value_alter(&$value, $field_map, $sf_object) {
  if ($sf_object['attributes']['type'] == 'CampaignMember' && $field_map['drupal_field']['fieldmap_value'] == 'user') {
    // $value is a Wrapped RedHen Contact object. We want to replace it with
    // that Contact's correlated User. Note that $value wants a Wrapper object,
    // which is exactly what we get when we ask a Contact Wrapper ($value) for
    // it's "user" property, but due to oddities of the entity system we need
    // to actually get the User value and create a fresh wrapper.
    $user = $value->user->value();
    $value = entity_metadata_wrapper('user', $user);
  }
}

/**
 * Implements hook_salesforce_query_alter().
 */
function salesforce_training_solutions_salesforce_query_alter(SalesforceSelectQuery &$query) {
  if ($query->objectType == 'Campaign') {
    // Only pull Campaigns which are marked "Active".
    $query->addCondition('IsActive', 'TRUE');
  }
}
